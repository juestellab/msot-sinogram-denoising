% Script to generate test data for denoising

[...
    output_root_path,...
    path_to_rec_toolbox,...
    deviceId,...
    preproc_min_filt_freq,...
    preproc_max_filt_freq,...
    apply_windowing,...
    preproc_window_length_start,...
    preproc_window_length_end,...
    preproc_window_butter_degree,...
    num_cropped_samples_sinogram_start,...
    num_cropped_samples_sinogram_end,...
    study_path,...
    dataset_shortname,...
    studies,...
    scans,...
    selmats, ...
    names] = set_parameters_for_test_data_generation();

%% Define required properties from model-based reconstruction toolbox
run([path_to_rec_toolbox filesep 'startup_reconstruction.m']);
probe = Probe(deviceId, false, false);

%% Create output folder strucutre and save parameter files
if ~exist(output_root_path, 'dir')
    mkdir(output_root_path);
end

save_path_root = fullfile(output_root_path, dataset_shortname);
if ~exist(save_path_root, 'dir')
    mkdir(save_path_root);
end

save_path_data = fullfile(save_path_root, 'test');
if ~exist(save_path_data, 'dir')
    mkdir(save_path_data);
end

copyfile('./set_parameters_for_test_data_generation.m', [save_path_root filesep 'set_parameters_for_test_data_generation.m']);
save([save_path_root filesep 'preprocessing_params.mat'], ...
    'deviceId', ...
    'preproc_min_filt_freq', ...
    'preproc_max_filt_freq', ...
    'preproc_window_length_start', ...
    'preproc_window_length_end', ...
    'preproc_window_butter_degree', ...
    'num_cropped_samples_sinogram_start', ...
    'num_cropped_samples_sinogram_end');

%% Iterate over aquired data - load - preprocess - save
for i_aquisition = 1:length(studies)
    study = studies(i_aquisition);
    scan = scans(i_aquisition);
    selmat = selmats{i_aquisition};

    % Load aquired data
    path_msot_file = fullfile(study_path, ['Study_' num2str(study)] , ['Scan_' num2str(scan)], ['Scan_' num2str(scan) '.msot']);
    data_raw = loadMSOTSignals(path_msot_file, selmat);

    % Preprocess the signals
    apply_filtering = true;
    preprocessed_data = crop_window_and_filter_msot_data(data_raw,...
        num_cropped_samples_sinogram_start,...
        num_cropped_samples_sinogram_end,...
        preproc_window_length_start,...
        preproc_window_length_end,...
        preproc_window_butter_degree,...
        preproc_min_filt_freq,...
        preproc_max_filt_freq,...
        probe.DAC.frequency,...
        apply_filtering,...
        apply_windowing);

    % save data
    for wavelength = 1:size(preprocessed_data, 3)
        name = [names{i_aquisition} '_Wavelength_' sprintf('%02d', wavelength) '.nii'];
        niftiwrite(single(preprocessed_data(:,:,wavelength)), fullfile(save_path_data, name));
    end
end
