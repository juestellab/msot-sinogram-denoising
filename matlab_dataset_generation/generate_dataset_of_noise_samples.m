% Script to generate training/validation data for denoising
[...
    path_to_rec_toolbox,...
    deviceId,...
    output_root_path,...
    splits,...
    preproc_min_filt_freq,...
    preproc_max_filt_freq,...
    apply_windowing,...
    preproc_window_length_start,...
    preproc_window_length_end,...
    preproc_window_butter_degree,...
    num_cropped_samples_sinogram_start,...
    num_cropped_samples_sinogram_end,...
    study_path_of_noise_samples,...
    studies_of_noise_samples_per_split,...
    scans_of_noise_samples_per_split,...
    wavelengths_considered_for_noise_samples,...
    image_folder,...
    voc2012_start_indices_per_split,...
    num_considered_voc2012_imgs_per_split,...
    use_eir,...
    use_indiv_eir,...
    use_sir,...
    use_single_speed_of_sound,...
    field_of_view,...
    number_of_grid_points_fov,...
    speed_of_sound_tissue] = set_parameters_for_trainval_data_generation();

%% Define required properties from model-based reconstruction toolbox
run([path_to_rec_toolbox filesep 'startup_reconstruction.m']);
probe = Probe(deviceId, false, false);

%% Create output folder strucutre and save parameter file
save_folder = [datestr(date,'yymmdd') '_noise_samples'];
save_path = fullfile(output_root_path, save_folder);
for i_split = 1:length(splits)
    split_subfolder_path = fullfile(save_path, splits{i_split});
        if ~exist(split_subfolder_path, 'dir')
            mkdir(split_subfolder_path);
        end
end
copyfile('./set_parameters_for_trainval_data_generation.m', [save_path filesep 'set_parameters_for_trainval_data_generation.m']);

%% Iterate over aquired data - load - preprocess - save
for i_split = 1:length(splits)
    split = splits{i_split};
    split_subfolder_path = fullfile(save_path, split);
    
    studies = studies_of_noise_samples_per_split{i_split};
    scans = scans_of_noise_samples_per_split{i_split};

    for i_aquisition = 1:length(studies)
        study = studies(i_aquisition);
        scan = scans(i_aquisition);

        % Load aquired data
        path_msot_file = fullfile(study_path_of_noise_samples,['Study_' num2str(study)] , ['Scan_' num2str(scan)], ['Scan_' num2str(scan) '.msot']);
        scan_strucuture = loadMSOT(path_msot_file).ScanStructure;
        selmat_for_noise = transpose(squeeze(scan_strucuture(:,:,:,wavelengths_considered_for_noise_samples, :)));
        selmat_for_noise = reshape(selmat_for_noise,[],1);
        
        data_raw = loadMSOTSignals(path_msot_file, selmat_for_noise);
        
        for pulse_id = 1:size(data_raw, 3)
            
            % Preprocess the signals
            preprocessed_data = crop_window_and_filter_msot_data(data_raw(:,:,pulse_id),...
                num_cropped_samples_sinogram_start,...
                num_cropped_samples_sinogram_end,...
                preproc_window_length_start,...
                preproc_window_length_end,...
                preproc_window_butter_degree,...
                preproc_min_filt_freq,...
                preproc_max_filt_freq,...
                probe.DAC.frequency,...
                true,...
                apply_windowing);

            % save data
            name = ['Study_' num2str(study) '_Scan_' num2str(scan) '_Pulse_' num2str(selmat_for_noise(pulse_id),'%.4i') '.nii'];
            niftiwrite(single(preprocessed_data), fullfile(split_subfolder_path, name));
        end
    end
end
