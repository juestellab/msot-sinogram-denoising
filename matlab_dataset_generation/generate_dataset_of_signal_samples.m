% Script to generate training/validation data for denoising
[...
    path_to_rec_toolbox,...
    deviceId,...
    output_root_path,...
    splits,...
    preproc_min_filt_freq,...
    preproc_max_filt_freq,...
    apply_windowing,...
    preproc_window_length_start,...
    preproc_window_length_end,...
    preproc_window_butter_degree,...
    num_cropped_samples_sinogram_start,...
    num_cropped_samples_sinogram_end,...
    study_path_of_noise_samples,...
    studies_of_noise_samples_per_split,...
    scans_of_noise_samples_per_split,...
    wavelengths_considered_for_noise_samples,...
    image_folder,...
    voc2012_start_indices_per_split,...
    num_considered_voc2012_imgs_per_split,...
    use_eir,...
    use_indiv_eir,...
    use_sir,...
    use_single_speed_of_sound,...
    field_of_view,...
    number_of_grid_points_fov,...
    speed_of_sound_tissue] = set_parameters_for_trainval_data_generation();

%% Define model for forward simulation
run([path_to_rec_toolbox filesep 'startup_reconstruction.m']);
num_cropped_samples_sinogram_start_for_model = 0; % Cropping is applied after the forward model in the "preprocessing" stage
model = define_model_for_reconstruction(field_of_view,...
    number_of_grid_points_fov,...
    deviceId,...
    use_eir,...
    use_indiv_eir,...
    use_sir,...
    use_single_speed_of_sound,...
    speed_of_sound_tissue,...
    num_cropped_samples_sinogram_start_for_model,...
    preproc_min_filt_freq,...
    preproc_max_filt_freq);

%% Create output folder strucutre and save parameter file
save_folder = [datestr(date,'yymmdd') '_oa_signal_smaples'];
save_path = fullfile(output_root_path, save_folder);
for i_split = 1:length(splits)
    split_subfolder_path = fullfile(save_path, splits{i_split});
        if ~exist(split_subfolder_path, 'dir')
            mkdir(split_subfolder_path);
        end
end
copyfile('./set_parameters_for_trainval_data_generation.m', [save_path filesep 'set_parameters_for_trainval_data_generation.m']);

%% Iterate over images: simulate OA signals via forward model - preprocess - save
D_images = dir([image_folder '/*.jpg']);
rng(234);
D_images = D_images(randperm(length(D_images)));

for i_split = 1:length(splits)
    split = splits{i_split};
    split_subfolder_path = fullfile(save_path, split);
    
    % Iterate over images
    for iImg = voc2012_start_indices_per_split(i_split):(voc2012_start_indices_per_split(i_split)+num_considered_voc2012_imgs_per_split(i_split)-1)
        fprintf('Split "%s": Generating sinogram from image no. %i of the VOC2012 dataset...\n', split, iImg);
        [~,name,ext] = fileparts(D_images(iImg).name);
        img = imread(fullfile(D_images(iImg).folder, [name ext]));
        img = imresize(img, model.Discretization.sizeOfPixelGrid, 'bicubic');
        if(size(img, 3) > 1)
            img = rgb2gray(img);
        end
        img = mat2gray(img);
        
        % Simulate OA signal
        signal_sample = model.Funcs.applyForward(img);
        signal_sample = reshape(signal_sample, [], model.Probe.detector.numOfTransducers, size(img, 3));
        
        % Preprocess the signals (filtering is already part of the forward model and thus skipped.
        signal_sample = crop_window_and_filter_msot_data(signal_sample,...
            num_cropped_samples_sinogram_start,...
            num_cropped_samples_sinogram_end,...
            preproc_window_length_start,...
            preproc_window_length_end,...
            preproc_window_butter_degree,...
            preproc_min_filt_freq,...
            preproc_max_filt_freq,...
            model.Probe.DAC.frequency,...
            false,...
            apply_windowing);
        
        % Save sample
        niftiwrite(single(signal_sample), fullfile(split_subfolder_path, name));     
    end
end
